#!/usr/bin/env sh

# Simple cli interfact to spotify using dbus

#    Copyright (C) 2020 Amlesh Sivanantham
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# BEFORE WE DO ANYTHING: Check if spotify is even alive
if [ -z "$(pidof spotify)" ]; then
    echo "ERROR: Spotify isn't running"
    exit 1
fi

spotify_dbus_action() {
    # Send Commands to spotify via DBUS.
    # Supported options:
    #   - Next
    #   - Previous
    #   - PlayPause
    action=$1

    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.${action}
}

spotify_dbus_get() {
    # I don't know dbus well enough to know why this command is different.
    # But its what works. I should eventually read up this...
    # Supported options:
    #   - PlaybackStatus
    #   - Metadata
    get_item="string:$1"
    dbus-send --print-reply \
        --dest=org.mpris.MediaPlayer2.spotify \
        /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get \
        string:'org.mpris.MediaPlayer2.Player' $get_item
}

spotify_status() {
    # TODO:
    #   + Get other info from metadata
    #   + Add support for custom %formats
    args=$@

    status=$(spotify_dbus_get PlaybackStatus | grep -o "Playing")
    if [ "$status" != "Playing" ]; then
        status="Paused"
    fi
    metadata=$(spotify_dbus_get Metadata)

    title=$(echo $metadata \
        | sed -e 's/.*"xesam:title"[^"]*"\([^"]*\)".*/\1/')
    album=$(echo $metadata \
        | sed -e 's/.*"xesam:album"[^"]*"\([^"]*\)".*/\1/')
    artist=$(echo $metadata \
        | sed -e 's/.*"xesam:artist"[^"]*"\([^"]*\)".*/\1/')

    if [ "$#" -eq 0 ]; then
        echo "title: ${title}"
        echo "artist: ${artist}"
        echo "album: ${album}"
        echo "status: ${status}"

    elif [ "$args" = "RAW" ]; then
        # This is for dev testing the above regex expressions
        echo "$(echo $metadata)"
    else
        echo "formatted string support isn't available yet."
    fi
}

help_usage() {
    echo "plz help"
}

# Parse command line arguments
if [ "$#" -eq 0 ]; then
    CMD="" && ARGS=""
else
    CMD=$1 && shift && ARGS=$@
fi

case "$CMD" in
    "toggle")   spotify_dbus_action PlayPause   ;;
    "next")     spotify_dbus_action Next        ;;
    "prev")     spotify_dbus_action Previous    ;;
    "status")   spotify_status ${ARGS}          ;;
    "")         spotify_status                  ;;
    *)          help_usage                      ;;
esac
